####################
根据例子学习Solidity
####################

.. index:: voting, ballot

.. _voting:

****
投票
****

以下合约相当复杂，但展示了很多Solidity的功能。它实施投票合约。
当然，电子投票的主要问题是如何为正确的人分配投票权以及如何防止伪造。
我们不会在这里解决所有问题，但至少我们将展示如何进行委托投票，
以便在同一时刻进行计票计数是 **自动且完全透明** 。

这个想法是每次投票创建一个合约，为每个选项提供一个简短的名称。
然后，作为主席的合约的创建者将分别对每个地址进行投票。

然后，地址背后的人可以选择自己投票或将投票委托给他们信任的人。

在投票时间结束时， ``winningProposal()`` 将返回投票数最多的提案。

::

    pragma solidity ^0.4.22;

    /// @title 委托投票。
    contract Ballot {
        //这声明了一个新的复杂类型，稍后将用于变量。它将代表一个选民。
        struct Voter {
            uint weight; // 权重由代表团累计
            bool voted;  // 若为真，代表已投票
            address delegate; // 被委托人
            uint vote;   // 投票人索引
        }

        // 这是单个提案的类型。
        struct Proposal {
            bytes32 name;   // 简称(多达32 字节)
            uint voteCount; // 累积票数
        }

        address public chairperson;

        // 这声明了一个状态变量，它为每个可能的地址存储一个`Voter`结构。
        mapping(address => Voter) public voters;

        //一个动态大小的 `Proposal` 结构数组。
        Proposal[] public proposals;

        ///创建一个新的选票来选择 `proposalNames` 之一。
        constructor(bytes32[] proposalNames) public {
            chairperson = msg.sender;
            voters[chairperson].weight = 1;

            //对于每个提供的提议名称，创建一个新的提案对象并将其添加到数组的末尾。
            for (uint i = 0; i < proposalNames.length; i++) {
                // `ProposalR(...})` 创建一个临时的Proposal对象，
                // `proposals.pushR(..)`将它追加到 `proposal` 的末尾。
                proposals.push(Proposal({
                    name: proposalNames[i],
                    voteCount: 0
                }));
            }
        }

        //赋予 `选民` 投票权。只有 `主席` 才能进行投票。
        function giveRightToVote(address voter) public {
            // 如果 `require` 的第一个参数求值为 `false` ，则执行终止，并恢复对状态和以太币余额的所有更改。
            // 这曾消耗旧EVM版本中的所有gas，但现在不用了。
            // 使用 `require` 检查函数是否被正确调用通常是个好主意。
            // 作为第二个参数，您还可以提供有关出错的说明。
            require(
                msg.sender == chairperson,
                "Only chairperson can give right to vote."
            );
            require(
                !voters[voter].voted,
                "The voter already voted."
            );
            require(voters[voter].weight == 0);
            voters[voter].weight = 1;
        }

        ///将你的投票委托给选民 `to` 。
        function delegate(address to) public {
            //指定参考
            Voter storage sender = voters[msg.sender];
            require(!sender.voted, "You already voted.");

            require(to != msg.sender, "Self-delegation is disallowed.");

            // 只要委托人 `to` 委托，就转发委托。
            // 一般来说，这样的循环是非常危险的，因为如果它们运行时间太长，它们可能需要比块中可用的gas更多的gas。
            // 在这种情况下，委托将不会被执行，但在其他情况下，这样的循环可能会导致合约完全“卡住”。
            while (voters[to].delegate != address(0)) {
                to = voters[to].delegate;

                // 我们在委托中找到了一个循环，不允许。
                require(to != msg.sender, "Found loop in delegation.");
            }

            //由于`sender`是一个引用，这会修改`votes [msg.sender] .voted`
            sender.voted = true;
            sender.delegate = to;
            Voter storage delegate_ = voters[to];
            if (delegate_.voted) {
                // 如果代表人已经投票，直接添加投票数
                proposals[delegate_.vote]. voteCount += sender.weight;
            } else {
                //如果代表尚未投票，增加它的权重。
                delegate_.weight += sender.weight;
            }
        }

        ///将您的投票（包括授权给您的投票）提交给提案 `proposals[proposal].name`。
        function vote(uint proposal) public {
            Voter storage sender = voters[msg.sender];
            require(!sender.voted, "Already voted.");
            sender.voted = true;
            sender.vote = proposal;

            //如果 `proposal` 超出了数组的范围，它将自动抛出并恢复所有更改。
            proposals[proposal].voteCount += sender.weight;
        }

        /// @dev 将所有先前的投票考虑在内计算获胜的提案。
        function winningProposal() public view
                returns (uint winningProposal_)
        {
            uint winningVoteCount = 0;
            for (uint p = 0; p < proposals.length; p++) {
                if (proposals[p].voteCount > winningVoteCount) {
                    winningVoteCount = proposals[p].voteCount;
                    winningProposal_ = p;
                }
            }
        }

        //调用winningProposal()函数获取titles数组中包含的获胜者的索引，然后返回获胜者的名字
        function winnerName() public view
                returns (bytes32 winnerName_)
        {
            winnerName_ = proposals[winningProposal()].name;
        }
    }


可能的改进
==========

目前，需要许多交易来将投票权分配给所有参与者。 你能想到一个更好的方法吗？

.. index:: auction;blind, auction;open, blind auction, open auction

****
盲拍
****

在本节中，我们将展示在以太坊上创建一个完整盲拍合约是多么容易。
我们将从公开竞价开始，每个人都可以看到所做的出价，
然后将此合约延伸到盲拍中，直到竞标期结束才能看到实际出价。

.. _simple_auction:

简单公开拍卖
============

以下简单拍卖合约的一般概念是每个人都可以在竞标期间发送出价。
出价已包括汇款/以太币，以便将投标人与其出价绑定。
如果提高出价，那么之前出价最高的出价者会收回她的钱。
在投标期结束后，必须手动调用合约以便受益人收到他的钱 - 合约不能自行激活。

::

    pragma solidity ^0.4.22;

    contract SimpleAuction {
        // 拍卖的参数。时间是绝对的unix时间戳（自1970-01-01以来的秒数）或以秒为单位的时间段。
        address public beneficiary;
        uint public auctionEnd;

        // 拍卖的当前状态。
        address public highestBidder;
        uint public highestBid;

        // 允许提取之前的出价
        mapping(address => uint) pendingReturns;

        // 最后设置为true，不允许任何更改
        bool ended;

        // 将在更改时触发的事件。
        event HighestBidIncreased(address bidder, uint amount);
        event AuctionEnded(address winner, uint amount);

        // 以下是所谓的natspec注释，可以通过三个斜线识别。
        // 当要求用户确认交易时将显示。

        /// 使用秒级出价时间`_biddingTime` 和代表受益人地址的 `_beneficiary` 
        /// 创建一个简单的拍卖。
        constructor(
            uint _biddingTime,
            address _beneficiary
        ) public {
            beneficiary = _beneficiary;
            auctionEnd = now + _biddingTime;
        }

        /// 竞标 在拍卖中与此交易一起发送的出价。
        /// 只有在未赢得拍卖的情况下，才会退还该值。
        function bid() public payable {
            // 不需要参数，所有信息都已成为交易的一部分。函数需要payable关键字才可以接收以太币
            // 如果竞价期结束，则恢复调用。
            require(
                now <= auctionEnd,
                "Auction already ended."
            );

            // 如果竞价不是很高，返还发送的钱
            require(
                msg.value > highestBid,
                "There already is a higher bid."
            );

            if (highestBid != 0) {
                // 简单地使用highestBidder.send(highestBid)发回资金存在安全风险
                // 因为它可以执行不受信任的合约。
                // 让接收者自己提现总是更安全的。
                pendingReturns[highestBidder] += highestBid;
            }
            highestBidder = msg.sender;
            highestBid = msg.value;
            emit HighestBidIncreased(msg.sender, msg.value);
        }

        /// 撤销过高的出价。
        function withdraw() public returns (bool) {
            uint amount = pendingReturns[msg.sender];
            if (amount > 0) {
                // It is important to set this to zero because the recipient
                // can call this function again as part of the receiving call
                // before `send` returns.
                pendingReturns[msg.sender] = 0;

                if (!msg.sender.send(amount)) {
                    // No need to call throw here, just reset the amount owing
                    pendingReturns[msg.sender] = amount;
                    return false;
                }
            }
            return true;
        }

        /// 结束拍卖并向受益人发送最高出价。
        function auctionEnd() public {
            //将与其他合约（即他们调用函数或发送以太）交互分为三个阶段是构造函数的一个很好的指南：

            // 1. 检查条件
            // 2. 执行动作（可能变化的条件）
            // 3. 与其他合约互动
            // 如果这些阶段混淆，另一个合约可以回调当前合约并修改状态或导致多次执行效果（以太支付）。
            // 如果内部调用的函数包括与外部合约的交互，则还必须考虑与外部合约的交互。

            // 1. 检查条件
            require(now >= auctionEnd, "Auction not yet ended.");
            require(!ended, "auctionEnd has already been called.");

            // 2. 效果
            ended = true;
            emit AuctionEnded(highestBidder, highestBid);

            // 3. 相互作用
            beneficiary.transfer(highestBid);
        }
    }

盲拍
====

之前的公开拍卖延伸至以下盲拍。
盲拍的优势在于，在竞标期结束时没有时间压力。
在透明的计算机平台上进行盲拍可能听起来像是一个矛盾，但加密技术带来了挽救。

在 **投标期** 期间，投标人实际上并未发送他的出价，而只是一个哈希版本。
由于目前认为实际上不可能找到其哈希值相等的两个（足够长的）值，因此投标人承诺投标。
在投标期结束后，投标人必须公开他们的投标：他们发送未加密的值，合约检查哈希值是否与投标期间提供的值相同。

另一个挑战是如何同时使拍卖**具有约束力和目障性**：阻止投标人在赢得拍卖后不发送资金的唯一方法是让她将其与投标一起发送。
由于价值转移不能在以太坊中被蒙蔽，任何人都可以看到价值。

以下合约通过接受任何大于最高出价的值来解决此问题。 
由于这当然只能在显示阶段进行检查，因此某些出价可能 **无效** ，
这是有目的的（它甚至提供了一个明确的标记，用于放置高价值转移的无效出价）：
投标人可以通过放置几个高或低无效出价来混淆竞争。

::

    pragma solidity >0.4.23 <0.5.0;

    contract BlindAuction {
        struct Bid {
            bytes32 blindedBid;
            uint deposit;
        }

        address public beneficiary;
        uint public biddingEnd;
        uint public revealEnd;
        bool public ended;

        mapping(address => Bid[]) public bids;

        address public highestBidder;
        uint public highestBid;

        // 允许提取之前的出价
        mapping(address => uint) pendingReturns;

        event AuctionEnded(address winner, uint highestBid);

        /// 修饰符是验证函数输入的便捷方式。 `onlyBefore`适用于下面的'bid`：
        /// 新函数体是修饰符的主体，其中`_`被旧函数体替换。
        modifier onlyBefore(uint _time) { require(now < _time); _; }
        modifier onlyAfter(uint _time) { require(now > _time); _; }

        constructor(
            uint _biddingTime,
            uint _revealTime,
            address _beneficiary
        ) public {
            beneficiary = _beneficiary;
            biddingEnd = now + _biddingTime;
            revealEnd = biddingEnd + _revealTime;
        }

        /// 使用 `_blindedBid` = keccak256(value, fake, secret)放置一个盲目的出价。
        /// 如果在显示阶段正确显示出价，则仅退还已发送的以太币。
        /// 如果与出价一起发送的以太网至少为“值”且“假”不为真，则出价有效。
        /// 将“假”设置为true并发送不准确的金额是隐藏实际出价但仍然需要存款的方法。
        /// 同一地址可以放置多个出价。
        function bid(bytes32 _blindedBid)
            public
            payable
            onlyBefore(biddingEnd)
        {
            bids[msg.sender].push(Bid({
                blindedBid: _blindedBid,
                deposit: msg.value
            }));
        }

        /// 显示盲目出价。
        /// 您将获得所有正确盲目无效出价以及除了最高的出价之外的所有出价之退款。
        function reveal(
            uint[] _values,
            bool[] _fake,
            bytes32[] _secret
        )
            public
            onlyAfter(biddingEnd)
            onlyBefore(revealEnd)
        {
            uint length = bids[msg.sender].length;
            require(_values.length == length);
            require(_fake.length == length);
            require(_secret.length == length);

            uint refund;
            for (uint i = 0; i < length; i++) {
                Bid storage bid = bids[msg.sender][i];
                (uint value, bool fake, bytes32 secret) =
                        (_values[i], _fake[i], _secret[i]);
                if (bid.blindedBid != keccak256(value, fake, secret)) {
                    // 实际上没有透露出价。
                    // 不退还押金。
                    continue;
                }
                refund += bid.deposit;
                if (!fake && bid.deposit >= value) {
                    if (placeBid(msg.sender, value))
                        refund -= value;
                }
                // 使发送者无法重新索取相同的存款。
                bid.blindedBid = bytes32(0);
            }
            msg.sender.transfer(refund);
        }

        // 这是一个“内部”函数，这意味着只能从合约本身（或从衍生合约）调用它。
        function placeBid(address bidder, uint value) internal
                returns (bool success)
        {
            if (value <= highestBid) {
                return false;
            }
            if (highestBidder != 0) {
                // 退还之前出价最高的出价人。
                pendingReturns[highestBidder] += highestBid;
            }
            highestBid = value;
            highestBidder = bidder;
            return true;
        }

        /// 撤回过高的出价。
        function withdraw() public {
            uint amount = pendingReturns[msg.sender];
            if (amount > 0) {
                // 将此值设置为零很重要，因为接收者可以在 `transfer` 返回之前
                // 再次调用此函数作为接收调用的一部分
                // （请参阅上面关于条件 ->效果 ->交互的注释）。
                pendingReturns[msg.sender] = 0;

                msg.sender.transfer(amount);
            }
        }

        ///结束拍卖并向受益人发送最高出价。
        function auctionEnd()
            public
            onlyAfter(revealEnd)
        {
            require(!ended);
            emit AuctionEnded(highestBidder, highestBid);
            ended = true;
            beneficiary.transfer(highestBid);
        }
    }


.. index:: purchase, remote purchase, escrow

************
安全远程采买
************

::

    pragma solidity ^0.4.22;

    contract Purchase {
        uint public value;
        address public seller;
        address public buyer;
        enum State { Created, Locked, Inactive }
        State public state;

        // 确保`msg.value`是偶数。
        // 如果是奇数，则将截断。
        // 通过乘法检查它不是奇数。
        constructor() public payable {
            seller = msg.sender;
            value = msg.value / 2;
            require((2 * value) == msg.value, "Value has to be even.");
        }

        modifier condition(bool _condition) {
            require(_condition);
            _;
        }

        modifier onlyBuyer() {
            require(
                msg.sender == buyer,
                "Only buyer can call this."
            );
            _;
        }

        modifier onlySeller() {
            require(
                msg.sender == seller,
                "Only seller can call this."
            );
            _;
        }

        modifier inState(State _state) {
            require(
                state == _state,
                "Invalid state."
            );
            _;
        }

        event Aborted();
        event PurchaseConfirmed();
        event ItemReceived();

        /// 中止购买并收回以太币。
        /// 只能在合约被锁定之前由卖家调用。
        function abort()
            public
            onlySeller
            inState(State.Created)
        {
            emit Aborted();
            state = State.Inactive;
            seller.transfer(address(this).balance);
        }

        /// 确认购买为买方。
        /// 交易必须包含 `2 * value` 以太币。
        /// 以太币将被锁定，直到调用confirmReceived。
        function confirmPurchase()
            public
            inState(State.Created)
            condition(msg.value == (2 * value))
            payable
        {
            emit PurchaseConfirmed();
            buyer = msg.sender;
            state = State.Locked;
        }

        /// 确认您（买方）收到了该项目。
        /// 这将释放锁定的以太币。
        function confirmReceived()
            public
            onlyBuyer
            inState(State.Locked)
        {
            emit ItemReceived();
            // 首先更改状态非常重要，否则，
            // 使用下面的 `send` 调用的合约可以在此处再次调用。
            state = State.Inactive;

            // 注意：这实际上允许买方和卖方阻止退款 - 应该使用提款模式。

            buyer.transfer(value);
            seller.transfer(address(this).balance);
        }
    }

************
小额支付渠道
************

要写。
